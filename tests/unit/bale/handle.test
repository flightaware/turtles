## \file handle.test

package require tcltest
namespace import ::tcltest::*

set testDirectory [file join [file dirname [file normalize [info script]]]] 
source ../kmm.tcl
source ../bale/handle.tcl
namespace import ::turtles::bale::handle::*

# Ground state for isolated proc
set NOOP_IDLE [init_proc_node 0 {::noop}]
# Waiting state for isolated proc
set NOOP_WAIT_MOE1 [dict replace $NOOP_IDLE awaiting 1 state {WAIT_MOE}]
# Done with MOE for isolated proc
set NOOP_DONE_MOE [dict replace $NOOP_IDLE awaiting 0 state {DONE_MOE}]
# Simulates proc with neighbor on another "machine"
set NOOP_E1_IDLE [dict replace $NOOP_IDLE neighbors [dict create 1 1] outerEdges [list 1]]
set NOOP_E1_WAIT_MOE1 [dict replace $NOOP_E1_IDLE awaiting 1 state {WAIT_MOE}]
# No procs on the machine
set PROCS_NONE [dict create]
# Degenerate procs dict - key without value
set PROCS_0_BLANK [dict create 0 [dict create]]
set PROCS_0_NOOP_IDLE [dict create 0 $NOOP_IDLE]
set PROCS_0_NOOP_WAIT_MOE1 [dict create 0 $NOOP_WAIT_MOE1]
set PROCS_0_NOOP_E1_IDLE [dict create 0 $NOOP_E1_IDLE]
set PROCS_0_NOOP_E1_WAIT_MOE1 [dict create 0 $NOOP_E1_WAIT_MOE1]
set CMDS_NONE [dict create]

# Modified from https://wiki.tcl-lang.org/page/dictutils
proc dict_equal {d1 d2} {
	if { [ lsort [ dict keys $d1 ] ] != [lsort [ dict keys $d2 ] ] } { return 0 }
	dict for {k1 v1} $d1 {
		if { ![ dict exists $d2 $k1] } { return 0 }
		set v2 [dict get $d2 $k1]
		catch {
			dict size $v1
			dict size $v2
			if { ![ dict_equal $v1 $v2 ] } { return 0 }
		} err {
			if { v1 != v2 } { return 0 }
		}
	}
	return 1
}

proc test_handler_return {cmd cmdArgs procsActual {procsExpected {}} {cmdsExpected {}}} {
	set ::turtles::kmm::machines 2
	test [subst {{$cmd}_return}] [subst {$cmd $cmdArgs}] -body {
		set cmdsActual [$cmd procsActual $cmdArgs]
		if { ![ dict_equal $procsActual $procsExpected ] } {
			error "Unexpected state change!\nExpected: $procsExpected\nActual: $procsActual"
		}
		return $cmdsActual
	} -result $cmdsExpected
}

# Testing add_proc
test_handler_return add_proc [list] $PROCS_NONE $PROCS_NONE

# Testing add_call
test_handler_return add_call [list] $PROCS_NONE $PROCS_NONE

# Testing find_moe
test_handler_return find_moe [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return find_moe [list] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
test_handler_return find_moe [list] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
test_handler_return find_moe [list 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return find_moe [list 0] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
# Valid case.
test_handler_return find_moe [list 0] $PROCS_0_NOOP_IDLE [dict create 0 $NOOP_WAIT_MOE1] [dict create {test_moe} [dict create 0 [list 0]]]
# Degenerate cases to illustrate field requirements.
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_IDLE 0 awaiting] [dict remove $PROCS_0_NOOP_IDLE 0 awaiting] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_IDLE 0 children] [dict remove $PROCS_0_NOOP_IDLE 0 children] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_IDLE 0 state] [dict remove $PROCS_0_NOOP_IDLE 0 state] $CMDS_NONE

# Testing test_moe
test_handler_return test_moe [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return test_moe [list] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
test_handler_return test_moe [list] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
test_handler_return test_moe [list 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return test_moe [list 0] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
# Idle nodes cannot test.
test_handler_return test_moe [list 0] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
# Valid case.
test_handler_return test_moe [list 0] $PROCS_0_NOOP_WAIT_MOE1 $PROCS_0_NOOP_WAIT_MOE1 [dict create {found_moe} [dict create 0 [list 0 [list 0 0 0]]]]
# Degenerate cases to illustrate field requirements.
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 state] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 state] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 outerEdges] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 outerEdges] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 parent] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 parent] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 moe] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 moe] $CMDS_NONE

# Testing req_root
test_handler_return req_root [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return req_root [list] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
test_handler_return req_root [list] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
test_handler_return req_root [list 1 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return req_root [list 1 0] $PROCS_0_BLANK $PROCS_0_BLANK $CMDS_NONE
# Valid case
test_handler_return req_root [list 1 0] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE [dict create {rsp_root} [dict create 1 [list 1 0]]]
test_handler_return req_root [list 1 0] $PROCS_0_NOOP_WAIT_MOE1 $PROCS_0_NOOP_WAIT_MOE1 [dict create {rsp_root} [dict create 1 [list 1 0]]]
# Degenerate cases to illustrate field requirements.
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_IDLE 0 root] [dict remove $PROCS_0_NOOP_IDLE 0 root] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 root] [dict remove $PROCS_0_NOOP_WAIT_MOE1 0 root] $CMDS_NONE


# Testing rsp_root
test_handler_return rsp_root [list] [dict create] [dict create] [dict create]
test_handler_return rsp_root [list 0 1] [dict create] [dict create] [dict create]
# Invalid because of lack of outgoing edges
test_handler_return rsp_root [list 0 0] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
test_handler_return rsp_root [list 0 1] $PROCS_0_NOOP_IDLE $PROCS_0_NOOP_IDLE $CMDS_NONE
# Valid cases
test_handler_return rsp_root [list 0 0] $PROCS_0_NOOP_E1_WAIT_MOE1 $PROCS_0_NOOP_E1_WAIT_MOE1 [dict create {test_moe} [dict create 0 [list 0]]]
test_handler_return rsp_root [list 0 1] $PROCS_0_NOOP_E1_WAIT_MOE1 $PROCS_0_NOOP_E1_WAIT_MOE1 [dict create {found_moe} [dict create 0 [list 0 [list 0 1 1]]]]

# Testing found_moe
test_handler_return found_moe [list] [dict create] [dict create] [dict create]
test_handler_return found_moe [list 0 1] [dict create] [dict create] [dict create]


cleanupTests
