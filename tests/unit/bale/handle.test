## \file handle.test

package require tcltest
namespace import ::tcltest::*

set testDirectory [file join [file dirname [file normalize [info script]]]] 
source ../kmm.tcl
source ../bale/handle.tcl
namespace import ::turtles::bale::handle::*

# Ground state for isolated proc
set NOOP_IDLE_E0 [init_proc_node 0 {::noop}]
# Waiting state for isolated proc
set NOOP_WAIT_E0 [dict replace $NOOP_IDLE_E0 awaiting 1 state {WAIT_MOE}]
# Done with MOE for isolated proc
set NOOP_DONE_E0 [dict replace $NOOP_IDLE_E0 awaiting 0 state {DONE_MOE}]
# Simulates proc with neighbor on another "machine"
set NOOP_IDLE_E1 [dict replace $NOOP_IDLE_E0 neighbors [dict create 1 1] outerEdges [list 1]]
set NOOP_WAIT_E1 [dict replace $NOOP_IDLE_E1 awaiting 1 state {WAIT_MOE}]
set NOOP_WAIT_E1_INNER [dict replace $NOOP_WAIT_E1 outerEdges [list] innerEdges [list 1]]
set NOOP_DONE_E1 [dict replace $NOOP_IDLE_E1 awaiting 0 state {DONE_MOE}]
set NOOP_DONE_E1_11 [dict replace $NOOP_DONE_E1 moe {0 1 1}]
set NOOP_WAIT2_E2_C1 [dict replace $NOOP_WAIT_E1 awaiting 2 neighbors [dict create 1 1 2 1] outerEdges [list 1] innerEdges [list 2] children [list 2]]
set NOOP_WAIT1_E2_C1 [dict replace $NOOP_WAIT_E1 neighbors [dict create 1 1 2 1] outerEdges [list 1] innerEdges [list 2] children [list 2]]
# No procs on the machine
set PROCS_NONE [dict create roots [dict create]]
# Degenerate procs dict - key without value
set PROCS_1_BLANK [dict create 0 [dict create] roots [dict create]]
# Root dictionaries
set ROOTS_1 [dict create 0 {}]
# Valid proc dictionaries
set PROCS_1_IDLE_E0 [dict create 0 $NOOP_IDLE_E0 roots $ROOTS_1]
set PROCS_1_WAIT_E0 [dict create 0 $NOOP_WAIT_E0 roots $ROOTS_1]
set PROCS_1_IDLE_E1 [dict create 0 $NOOP_IDLE_E1 roots $ROOTS_1]
set PROCS_1_WAIT_E1 [dict create 0 $NOOP_WAIT_E1 roots $ROOTS_1]
set PROCS_1_WAIT_E1_INNER [dict create 0 $NOOP_WAIT_E1_INNER roots $ROOTS_1]
set PROCS_1_WAIT2_E2_C1 [dict create 0 $NOOP_WAIT2_E2_C1 roots $ROOTS_1]
set PROCS_1_WAIT1_E2_C1 [dict create 0 $NOOP_WAIT1_E2_C1 roots $ROOTS_1]
set PROCS_1_DONE_E1 [dict create 0 $NOOP_DONE_E1 roots $ROOTS_1]
set PROCS_1_DONE_E1_11 [dict create 0 $NOOP_DONE_E1_11 roots $ROOTS_1]
# No commands returned
set CMDS_NONE [dict create]

# Modified from https://wiki.tcl-lang.org/page/dictutils
proc dict_eq {d1 d2} {
	if { [ lsort [ dict keys $d1 ] ] != [lsort [ dict keys $d2 ] ] } { return 0 }
	set ok 1
	dict for {k1 v1} $d1 {
		if { ![ dict exists $d2 $k1] } { set ok 0; break }
		set v2 [dict get $d2 $k1]
		if { [catch {
			# Attempt dictionary operations on the values.
			dict size $v1
			dict size $v2
			# If we can pretend it's a dictionary, let's do it!
			# The result should be the same whether it's compared
			# as a string or dictionary or list.
			if { ![ dict_eq $v1 $v2 ] } { set ok 0; break }
		} err] } {
			# One of 'em is not a dictionary.
			# Try simple equality test.
			if { $v1 != $v2 } { set ok 0; break }
		}
	}
	return $ok
}

set d00 [dict create 0 0]
set d11 [dict create 1 1]
set d01 [dict create 0 1]
set d10 [dict create 1 0]

# dict_eq self-check
test dict_eq {{} == {}} -body { dict_eq [dict create] [dict create] } -result 1
test dict_eq {"" == ""} -body { dict_eq "" "" } -result 1
test dict_eq {[list] == [list]} -body { dict_eq [list] [list] } -result 1
test dict_eq {{} != {0 0}} -body { dict_eq [dict create] [dict create 0 0] } -result 0
test dict_eq {{0 0} == {0 0}} -body { dict_eq [dict create 0 0] [dict create 0 0] } -result 1
test dict_eq {[0 0] == [0 0]} -body { dict_eq [list 0 0] [list 0 0] } -result 1
test dict_eq {[0 0] == [0 0]} -body { dict_eq [list 0 0] [list 0 0] } -result 1
test dict_eq {{0 {0 0} 1 {1 1}} == {0 {0 0} 1 {1 1}}} -body { dict_eq [dict create 0 $d00 1 $d11] [dict create 0 $d00 1 $d11] } -result 1 
test dict_eq {{0 {0 0} 1 {1 1}} != {1 {0 0} 0 {1 1}}} -body { dict_eq [dict create 0 $d00 1 $d11] [dict create 0 $d11 1 $d00] } -result 0
test dict_eq {{0 {0 0} 1 {1 0}} != {0 {0 0} 1 {1 1}}} -body { dict_eq [dict create 0 $d00 1 $d10] [dict create 0 $d00 1 $d11] } -result 0


proc test_handler_return {cmd cmdArgs procsActual {procsExpected {}} {cmdsExpected {}}} {
	set ::turtles::kmm::machines 2
	set ::turtles::kmm::myself 0
	test [subst {{$cmd}_return}] [subst {$cmd $cmdArgs}] -body {
		set ::turtles::bale::procs $procsActual
		set cmdsActual [$cmd $cmdArgs]
		if { ![ dict_eq $::turtles::bale::procs $procsExpected ] } {
			error "Unexpected state change!\nExpected: $procsExpected\nActual: $::turtles::bale::procs"
		}
		return $cmdsActual
	} -result $cmdsExpected
}

# Testing add_proc
test_handler_return add_proc [list] $PROCS_NONE $PROCS_NONE

# Testing add_call
test_handler_return add_call [list] $PROCS_NONE $PROCS_NONE

# Testing find_moe
test_handler_return find_moe [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return find_moe [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return find_moe [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return find_moe [list 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return find_moe [list 0] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
# Valid case.
test_handler_return find_moe [list 0] $PROCS_1_IDLE_E0 $PROCS_1_WAIT_E0 [dict create {test_moe} [dict create 0 [list 0]]]
# Degenerate cases to illustrate field requirements.
test_handler_return find_moe [list 0] [dict remove $PROCS_1_IDLE_E0 0 awaiting] [dict remove $PROCS_1_IDLE_E0 0 awaiting] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_1_IDLE_E0 0 children] [dict remove $PROCS_1_IDLE_E0 0 children] $CMDS_NONE
test_handler_return find_moe [list 0] [dict remove $PROCS_1_IDLE_E0 0 state] [dict remove $PROCS_1_IDLE_E0 0 state] $CMDS_NONE

# Testing test_moe
test_handler_return test_moe [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return test_moe [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return test_moe [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return test_moe [list 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return test_moe [list 0] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
# Idle nodes cannot test.
test_handler_return test_moe [list 0] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
# Valid case.
test_handler_return test_moe [list 0] $PROCS_1_WAIT_E0 $PROCS_1_WAIT_E0 [dict create {found_moe} [dict create 0 [list 0 [list 0 0 0]]]]
# Degenerate cases to illustrate field requirements.
test_handler_return test_moe [list 0] [dict remove $PROCS_1_WAIT_E0 0 state] [dict remove $PROCS_1_WAIT_E0 0 state] $CMDS_NONE
test_handler_return test_moe [list 0] [dict remove $PROCS_1_WAIT_E0 0 outerEdges] [dict remove $PROCS_1_WAIT_E0 0 outerEdges] $CMDS_NONE
test_handler_return test_moe [list 0] [dict remove $PROCS_1_WAIT_E0 0 parent] [dict remove $PROCS_1_WAIT_E0 0 parent] $CMDS_NONE
test_handler_return test_moe [list 0] [dict remove $PROCS_1_WAIT_E0 0 moe] [dict remove $PROCS_1_WAIT_E0 0 moe] $CMDS_NONE

# Testing req_root
test_handler_return req_root [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return req_root [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return req_root [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return req_root [list 1 0] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return req_root [list 1 0] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
# Valid case
test_handler_return req_root [list 1 0] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 [dict create {rsp_root} [dict create 1 [list 1 0]]]
test_handler_return req_root [list 1 0] $PROCS_1_WAIT_E0 $PROCS_1_WAIT_E0 [dict create {rsp_root} [dict create 1 [list 1 0]]]
# Degenerate cases to illustrate field requirements.
test_handler_return find_moe [list 1 0] [dict remove $PROCS_1_IDLE_E0 0 root] [dict remove $PROCS_1_IDLE_E0 0 root] $CMDS_NONE
test_handler_return find_moe [list 1 0] [dict remove $PROCS_1_WAIT_E0 0 root] [dict remove $PROCS_1_WAIT_E0 0 root] $CMDS_NONE


# Testing rsp_root
test_handler_return rsp_root [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return rsp_root [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return rsp_root [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return rsp_root [list] $PROCS_1_WAIT_E1 $PROCS_1_WAIT_E1 $CMDS_NONE
# Invalid because of lack of outgoing edges
test_handler_return rsp_root [list 0 0] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return rsp_root [list 0 1] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
# Valid cases
test_handler_return rsp_root [list 0 0] $PROCS_1_WAIT_E1 $PROCS_1_WAIT_E1_INNER [dict create {test_moe} [dict create 0 [list 0]]]
test_handler_return rsp_root [list 0 1] $PROCS_1_WAIT_E1 $PROCS_1_WAIT_E1 [dict create {found_moe} [dict create 0 [list 0 [list 0 1 1]]]]
# Degnenerate cases to illustrate field requirements.
test_handler_return rsp_root [list 0 0] [dict remove $PROCS_1_WAIT_E1 0 state] [dict remove $PROCS_1_WAIT_E1 0 state] $CMDS_NONE
test_handler_return rsp_root [list 0 0] [dict remove $PROCS_1_WAIT_E1 0 innerEdges] [dict remove $PROCS_1_WAIT_E1 0 innerEdges] $CMDS_NONE
test_handler_return rsp_root [list 0 0] [dict remove $PROCS_1_WAIT_E1 0 outerEdges] [dict remove $PROCS_1_WAIT_E1 0 outerEdges] $CMDS_NONE
test_handler_return rsp_root [list 0 0] [dict remove $PROCS_1_WAIT_E1 0 neighbors] [dict remove $PROCS_1_WAIT_E1 0 neighbors] $CMDS_NONE
test_handler_return rsp_root [list 0 0] [dict remove $PROCS_1_WAIT_E1 0 roots] [dict remove $PROCS_1_WAIT_E1 0 roots] $CMDS_NONE
test_handler_return rsp_root [list 0 1] [dict remove $PROCS_1_WAIT_E1 0 state] [dict remove $PROCS_1_WAIT_E1 0 state] $CMDS_NONE
test_handler_return rsp_root [list 0 1] [dict remove $PROCS_1_WAIT_E1 0 innerEdges] [dict remove $PROCS_1_WAIT_E1 0 innerEdges] $CMDS_NONE
test_handler_return rsp_root [list 0 1] [dict remove $PROCS_1_WAIT_E1 0 outerEdges] [dict remove $PROCS_1_WAIT_E1 0 outerEdges] $CMDS_NONE
test_handler_return rsp_root [list 0 1] [dict remove $PROCS_1_WAIT_E1 0 neighbors] [dict remove $PROCS_1_WAIT_E1 0 neighbors] $CMDS_NONE
test_handler_return rsp_root [list 0 1] [dict remove $PROCS_1_WAIT_E1 0 roots] [dict remove $PROCS_1_WAIT_E1 0 roots] $CMDS_NONE

# Testing found_moe
test_handler_return found_moe [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] $PROCS_NONE $PROCS_NONE $CMDS_NONE

test_handler_return found_moe [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE

test_handler_return found_moe [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 $CMDS_NONE

test_handler_return found_moe [list] $PROCS_1_IDLE_E1 $PROCS_1_IDLE_E1 $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] $PROCS_1_IDLE_E1 $PROCS_1_IDLE_E1 $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] $PROCS_1_IDLE_E1 $PROCS_1_IDLE_E1 $CMDS_NONE

# Valid cases.
test_handler_return found_moe [list 0 [list 2 1 1]] $PROCS_1_WAIT2_E2_C1 [dict create roots $ROOTS_1 0 [dict replace $NOOP_WAIT1_E2_C1 moe [list 2 1 1]]] [dict create {test_moe} [dict create 0 [list 0]]]
test_handler_return found_moe [list 0 [list 2 0 0]] $PROCS_1_WAIT2_E2_C1 $PROCS_1_WAIT1_E2_C1 [dict create {test_moe} [dict create 0 [list 0]]]
test_handler_return found_moe [list 0 [list 0 1 1]] $PROCS_1_WAIT_E1 $PROCS_1_DONE_E1_11 $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] $PROCS_1_WAIT_E1 $PROCS_1_DONE_E1 $CMDS_NONE

# Degnenerate cases to illustrate field requirements.
test_handler_return found_moe [list 0 [list 0 1 1]] [dict remove $PROCS_1_WAIT_E1 0 state] [dict remove $PROCS_1_WAIT_E1 0 state] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] [dict remove $PROCS_1_WAIT_E1 0 awaiting] [dict remove $PROCS_1_WAIT_E1 0 awaiting] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] [dict remove $PROCS_1_WAIT_E1 0 moe] [dict remove $PROCS_1_WAIT_E1 0 moe] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] [dict remove $PROCS_1_WAIT_E1 0 parent] [dict remove $PROCS_1_WAIT_E1 0 parent] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 1 1]] [dict remove $PROCS_1_WAIT_E1 0 procId] [dict remove $PROCS_1_WAIT_E1 0 procId] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] [dict remove $PROCS_1_WAIT_E1 0 state] [dict remove $PROCS_1_WAIT_E1 0 state] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] [dict remove $PROCS_1_WAIT_E1 0 awaiting] [dict remove $PROCS_1_WAIT_E1 0 awaiting] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] [dict remove $PROCS_1_WAIT_E1 0 moe] [dict remove $PROCS_1_WAIT_E1 0 moe] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] [dict remove $PROCS_1_WAIT_E1 0 parent] [dict remove $PROCS_1_WAIT_E1 0 parent] $CMDS_NONE
test_handler_return found_moe [list 0 [list 0 0 0]] [dict remove $PROCS_1_WAIT_E1 0 procId] [dict remove $PROCS_1_WAIT_E1 0 procId] $CMDS_NONE


# Testing phase1_go

test_handler_return phase1_go [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return phase1_go [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE
test_handler_return phase1_go [list] $PROCS_1_IDLE_E0 $PROCS_1_IDLE_E0 [dict create {find_moe} [dict create 0 [list 0]]]
test_handler_return phase1_go [list] $PROCS_1_IDLE_E1 $PROCS_1_IDLE_E1 [dict create {find_moe} [dict create 0 [list 0]]]

# Testing phase1_done

test_handler_return phase1_done [list] $PROCS_NONE $PROCS_NONE $CMDS_NONE
test_handler_return phase1_done [list] $PROCS_1_BLANK $PROCS_1_BLANK $CMDS_NONE

cleanupTests
