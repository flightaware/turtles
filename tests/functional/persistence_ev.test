## \file persistence.test

package require tcltest
package require Thread
namespace import ::tcltest::*

# Module under test
package require turtles::persistence::ev

proc with_persistence_test {{commitMode staged} {intervalMillis 1000} {testBody {return 1}} {testResult 1}} {
	set title [subst {with_persistence-$commitMode-$intervalMillis}]
	test with_persistence $title -setup {
		::turtles::persistence::ev::start $commitMode $intervalMillis {./} $title
	} -body { [eval $testBody]
	} -cleanup {
		::turtles::persistence::ev::stop
		file delete [::turtles::persistence::base::get_db_filename {.} $title]
	} -result $testResult
}

with_persistence_test
with_persistence_test direct

with_persistence_test staged 50 {
	turtles::persistence::ev::add_proc_id 1 ::one [clock microseconds]
	turtles::persistence::ev::add_call 0 1 0 [clock microseconds]
	after 25
	turtles::persistence::ev::update_call 0 1 0 [clock microseconds]
	# Double the purported finalize interval for engineering slop.
	# There may be a lower bound on the Tcl event loop in terms of resolution.
	after 500
	update
	return [::turtles::persistence::ev::stages eval {
		SELECT calls FROM stage1.calls_by_caller_callee WHERE caller_name = '' AND callee_name = '::one';
	}]
} 1

with_persistence_test direct 50 {
	turtles::persistence::ev::add_proc_id 1 ::one [clock microseconds]
	turtles::persistence::ev::add_call 0 1 0 [clock microseconds]
	after 25
	turtles::persistence::ev::update_call 0 1 0 [clock microseconds]
	# No delay required. Direct write hits the final DB directly.
	return [::turtles::persistence::ev::stages eval {
		SELECT calls FROM main.calls_by_caller_callee WHERE caller_name = '' AND callee_name = '::one';
	}]
} 1

cleanupTests
